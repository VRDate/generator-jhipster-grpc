syntax = "proto3";

option java_multiple_files = true;
option java_package = "<%=packageName%>.grpc.entity.<%=entityUnderscoredName%>";
//option java_outer_classname = "";

package <%=packageName%>.entity;

import "google/protobuf/empty.proto";<% if (fieldsContainZonedDateTime) { %>
import "google/protobuf/timestamp.proto";<% } %>
import "google/protobuf/wrappers.proto";<% if (fieldsContainBigDecimal) { %>
import "util/decimal.proto";<% } %><% if (fieldsContainLocalDate) { %>
import "util/date.proto";<% } %><% if (pagination !== 'no') { %>
import "util/pagination.proto";<% } %>

// gRPC service providing CRUD methods for entity <%=entityClass%>
service <%=entityClass%>Service {
    // Create a new <%=entityInstance%>.
    // request : the <%=entityInstance%>Proto to create
    // response : the created <%=entityInstance%>Proto or a ALREADY_EXISTS error
    rpc Create<%=entityClass%> (<%=entityClass%>Proto) returns (<%=entityClass%>Proto);

    // Update or create a <%=entityInstance%>.
    // request : the <%=entityInstance%>Proto to update or create
    // response : the updated <%=entityInstance%>Proto
    rpc Update<%=entityClass%> (<%=entityClass%>Proto) returns (<%=entityClass%>Proto);

    // Get all the <%=entityInstancePlural%>.
    // response : the list of <%=entityInstance%>Protos
    rpc GetAll<%=entityClassPlural%> (<% if (pagination !== 'no') { %>util.PageRequest<% } else { %>google.protobuf.Empty<% } %>) returns (stream <%=entityClass%>Proto);

    // Get a <%=entityInstance%> from it's id.
    // request : the id of the <%=entityInstance%>Proto to retrieve
    // response : the <%=entityInstance%>Proto or a NOT_FOUND error
    rpc Get<%=entityClass%> (google.protobuf.<%=idProtoWrappedType%>) returns (<%=entityClass%>Proto);

    // Delete a <%=entityInstance%> from it's id.
    // request : the id of the <%=entityInstance%>Proto to delete
    // response : empty or a NOT_FOUND error
    rpc Delete<%=entityClass%> (google.protobuf.<%=idProtoWrappedType%>) returns (google.protobuf.Empty);
}

<%_ for (field of fields) {
    if (field.fieldIsEnum) {
        let enumValues = field.fieldValues.split(',');_%>
enum <%=field.fieldType %>Proto {
        <%_ for (let idx in enumValues) { _%>
    <%= enumValues[idx].trim() %> = <%= idx %>;
        <%_ } _%>
}
     <%_ } _%>
<%_ } _%>

<%= entityJavadoc %>
message <%=entityClass%>Proto {
    oneof id_oneof {
        <%=idProtoType%> id = 1;
    }

<%_ for (idx in fields) {
    var isOneOf = false;
    var indentOneOf = '';
    var fieldValidate = fields[idx].fieldValidate;
    var fieldValidateRules = fields[idx].fieldValidateRules;
    var fieldValidateRulesMaxlength = fields[idx].fieldValidateRulesMaxlength;
    var fieldType = fields[idx].fieldProtobufType;
    var isProtobufCustomType = fields[idx].isProtobufCustomType;
    var fieldName = fields[idx].fieldName;
    var fieldNameUnderscored = fields[idx].fieldNameUnderscored;
    if (!isProtobufCustomType && !(fieldValidate && fieldValidateRules.indexOf('required') != -1)) {
        isOneOf = true;
        indentOneOf = '    ';
    }
    var javadoc = '';
    if(fields[idx].javadoc !== undefined) {
        javadoc = '// ' + fields[idx].javadoc.replace('\n', '\n    '+ indentOneOf + '// ') + '\n    '+ indentOneOf;
    }_%>
    <% if (isOneOf) { %>oneof <%=fieldNameUnderscored%>_oneof {
        <% } %><%= javadoc %><%=fieldType%> <%=fieldNameUnderscored%> = <%=parseInt(idx) +2%>;<% if (isOneOf) { %>
    }<% } %>

<%_ } _%>
}
